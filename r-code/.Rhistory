library(magick)
library(reshape2)
library(ash)
library(tidyverse)
library(spatstat)
library(tiff)
library(EBImage)
library(autothresholdr)
#### Miniature script for early processing ####
input_folder <- 'D:/master/raw-data/18.7 strain-condition series/media/14h-2/pro'
tif_files <- list.files(path = input_folder,
pattern = "\\.tif(f)?$",
recursive = TRUE,    # Search subdirectories
full.names = TRUE)   # Get full paths
extracted_labels <- sapply(tif_files, function(x) {
fname <- basename(x)  # Get filename only
label <- sub("^FFT\\s+", "", fname)  # Remove "FFT " at the start
label <- sub("\\.tif(f)?$", "", label)  # Remove .tif or .tiff extension
return(label)
})
names(extracted_labels) <- NULL
df <- data.frame(
Label = extracted_labels,
intensity = NA_real_,  # Numeric NA
hetero = NA_real_,   # Numeric NA
thresh = NA_real_   # Numeric NA
)
#Pixel is 1.175um (according to 200um scale, length of scale is 235 pixels)
pixscale <- 1.175
#Try out different models!
tm <- "Otsu"
#Maximum number of pixels to process (1e5 works well)
max_pixels <- 1e5
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 10)[-1]
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
lam <- intensity(Q_b)
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
df$intensity[i] <- NA_real_
df$hetero[i] <- NA_real_
df$thresh[i] <- NA_real_
}
}
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 5)[-1]
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
lam <- intensity(Q_b)
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
df$intensity[i] <- NA_real_
df$hetero[i] <- NA_real_
df$thresh[i] <- NA_real_
}
}
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 5)[-1]
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = extracted_labels,
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 5)[-1]
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
lam <- intensity(Q_b)
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
df$intensity[i] <- NA_real_
df$hetero[i] <- NA_real_
df$thresh[i] <- NA_real_
}
}
ggplot(dataframe, aes(x = hetero, y = box_no, color = extracted_labels)) +
geom_point() +
labs(x = "Hetero", y = "Box Number", color = "Extracted Labels") +
theme_minimal()
ggplot(df, aes(x = hetero, y = box_no, color = extracted_labels)) +
geom_point() +
labs(x = "Hetero", y = "Box Number", color = "Extracted Labels") +
theme_minimal()
ggplot(df, aes(x = box_no, y = hetero, color = extracted_labels)) +
geom_point() +
labs(x = "Hetero", y = "Box Number", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none")
filtered_df <- df %>%
filter(extracted_labels %in% c("317", "co"))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = extracted_labels)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none")
filtered_df
filtered_df <- df %>%
filter(extracted_labels %in% c("317"))
filtered_df
filtered_df <- df %>%
filter(Label %in% c("317","co"))
filtered_df <- df %>%
filter(Label %in% c("317"))
df$Label
filtered_df <- df %>%
filter(grepl("317", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = extracted_labels)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none")
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none")
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = rep( unique(extracted_labels) , times=length(box_no) ),
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
df
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = rep( unique(extracted_labels) , each = length(box_no) ),
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
head(df)
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
lam <- intensity(Q_b)
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
df$intensity[i] <- NA_real_
df$hetero[i] <- NA_real_
df$thresh[i] <- NA_real_
}
}
filtered_df <- df %>%
filter(grepl("317", Label))
filtered_df <- df %>%
filter(grepl("317", Label)) %>%
filter(grepl("co", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = rep( unique(extracted_labels) , each = length(box_no) ),
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 5)[-1]
for ( i in 1:length(extracted_labels) ) {
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
mini_points <- melt_points
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
}
filtered_df <- df %>%
filter(grepl("317", Label)) %>%
filter(grepl("co", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = rep( unique(extracted_labels) , each = length(box_no) ),
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
#Input box no.'s as a list
box_no <- seq(from = 0, to = 100, by = 5)[-1]
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[i] <- tS$statistic
}
}
else {
mini_points <- melt_points
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[((i-1)*length(box_no))+z] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[((i-1)*length(box_no))+z] <- tS$statistic
}
}
}
filtered_df <- df %>%
filter(grepl("317", Label)) %>%
filter(grepl("co", Label)) %>%
filter(grepl("2ag", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df
df
i <- 1
i <- 2
for ( z in 1:length(box_no) ) {
df$box_no[((i-1)*length(box_no))+z] <- box_no[z]
print(((i-1)*length(box_no))+z)
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[((i-1)*length(box_no))+z] <- tS$statistic
}
count <- 1
#Modified variant for calculating X2 across many different bin no's
df <- data.frame(
Label = rep( unique(extracted_labels) , each = length(box_no) ),
hetero = NA_real_,   # Numeric NA
box_no = NA_real_
)
for ( i in 1:length(extracted_labels) ) {
fn <- tif_files[i]
mat <- readTIFF(fn, as.is=TRUE, info=TRUE)
smat <- transmat(mat, from="European", to="spatstat")
test_im <- im(smat)
test_X <- eval.im( test_im )
mat <- as.matrix( test_X )
thresh <- auto_thresh(mat, method = tm)
mat <- mat >= thresh
melt <- melt( mat )
melt_points <- melt[melt$value==TRUE,]
if (nrow(melt_points) >= max_pixels ) {
mini_points <- melt_points[sample(nrow(melt_points),max_pixels),]
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[count] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[count] <- tS$statistic
count <- count + 1
}
}
else {
mini_points <- melt_points
Q_a <- ppp(mini_points$Var1, mini_points$Var2,
c( 0 , nrow( as.matrix( test_X ) ) ) ,
c( 0 , ncol( as.matrix( test_X ) ) ))
Q_a <- rescale(Q_a,
s=1/pixscale,
unitname="um")
Q_b <- ppp(mini_points$Var2, mini_points$Var1,
c( 0 , ncol( as.matrix( test_X ) ) ) ,
c( 0 , nrow( as.matrix( test_X ) ) ))
Q_b <- rescale(Q_b,
s=1/pixscale,
unitname="um")
for ( z in 1:length(box_no) ) {
df$box_no[count] <- box_no[z]
tS <- quadrat.test(Q_b, nx=box_no[z], ny=box_no[z])
df$hetero[count] <- tS$statistic
count <- count + 1
}
}
}
filtered_df <- df %>%
filter(grepl("317", Label)) %>%
filter(grepl("co", Label)) %>%
filter(grepl("2ag", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df <- df %>%
filter(grepl("317", Label)) %>%
filter(grepl("co", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df <- df %>%
filter(grepl("317", Label))
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
filtered_df <- df
ggplot(filtered_df, aes(x = box_no, y = hetero, color = Label)) +
geom_point() +
labs(x = "Box number", y = "Hetero", color = "Extracted Labels") +
theme_minimal() +
theme(legend.position = "none") +
geom_line()
