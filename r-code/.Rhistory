bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < -40 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 0 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 100 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
# :) Appears successful. Now for the cherry-on-top.
overlapped_map <- adjusted_map_red - adjusted_map_gfp
overlapped_melt <- reshape2::melt( overlapped_map )
overlapped_threshold <- filter( overlapped_melt , value < 100 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 40 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value > 40 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value > -30 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value > -100 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
gc()
# Dependencies
library(magick)
library(reshape2)
library(ash)
library(tidyverse)
#### Experimentation: color standardization ####
test_image_gfp <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/PAO1 gfp.tif')
test_image_red <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/PAO1 red.tif')
test_map_gfp <- as.integer( magick::image_data( test_image_gfp , channels="Gray" ) )[,,1]
test_map_red <- as.integer( magick::image_data( test_image_red , channels="Gray" ) )[,,1]
## Using pre-calculated ranges
# 'Node' matrix
box_size <- 100
x_nodes <- seq( from=1+box_size/2 , to=length(test_map_gfp[1,])-box_size/2 , by=box_size )
y_nodes <- seq( from=1+box_size/2 , to=length(test_map_gfp[,1]-box_size/2 ) , by=box_size )
node_intensity_step <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
node_minimum_intensity <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
min_max_diff <- range( test_map_gfp[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)])
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
node_intensity_step[x,y] <- intensity_step
node_minimum_intensity[x,y] <- min_max_diff[1]
}
print(x)
}
# 'Node' matrix reversion into full-size matrix
intensity_step_map <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
minimum_intensity_map <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
intensity_step_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_intensity_step[x,y]
minimum_intensity_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_minimum_intensity[x,y]
}
}
# Actual image adjustment
adjusted_map_gfp <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
for ( x in 51:length(test_map_gfp[1,]-50 ) ) {
for ( y in 51:length(test_map_gfp[,1]-50 ) ) {
adjusted_map_gfp[y,x] <- (test_map_gfp[y,x] - minimum_intensity_map[y,x] ) * intensity_step_map[y,x]
}
print(x)
}
# Adjustment confirmation
gfp_melt <- reshape2::melt( adjusted_map_gfp )
gfp_threshold <- filter( gfp_melt , value>150 )
bins_gfp <- bin2(cbind(gfp_threshold$Var1, gfp_threshold$Var2) , nbin=c(100,100))
gfp_bins_melt <- reshape2::melt( bins_gfp$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
## Repetition for red
box_size <- 100
x_nodes <- seq( from=1+box_size/2 , to=length(test_map_red[1,])-box_size/2 , by=box_size )
y_nodes <- seq( from=1+box_size/2 , to=length(test_map_red[,1]-box_size/2 ) , by=box_size )
node_intensity_step <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
node_minimum_intensity <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
min_max_diff <- range( test_map_red[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)])
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
node_intensity_step[x,y] <- intensity_step
node_minimum_intensity[x,y] <- min_max_diff[1]
}
print(x)
}
intensity_step_map <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
minimum_intensity_map <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
intensity_step_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_intensity_step[x,y]
minimum_intensity_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_minimum_intensity[x,y]
}
}
adjusted_map_red <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
for ( x in 51:length(test_map_red[1,]-50 ) ) {
for ( y in 51:length(test_map_red[,1]-50 ) ) {
adjusted_map_red[y,x] <- (test_map_red[y,x] - minimum_intensity_map[y,x] ) * intensity_step_map[y,x]
}
print(x)
}
red_melt <- reshape2::melt( adjusted_map_red )
red_threshold <- filter( red_melt , value>50 )
bins_red <- bin2(cbind(red_threshold$Var1, red_threshold$Var2) , nbin=c(100,100))
red_bins_melt <- reshape2::melt( bins_red$nc )
ggplot( red_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
# :) Appears successful. Now for the combination.
overlapped_map <- adjusted_map_red - adjusted_map_gfp
overlapped_melt <- reshape2::melt( overlapped_map )
overlapped_threshold <- filter( overlapped_melt , value > -100 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
# :) Appears successful. Now for the combination.
overlapped_map <- adjusted_map_gfp - adjusted_map_red
# :) Appears successful. Now for the combination.
overlapped_map <- adjusted_map_gfp - adjusted_map_red
overlapped_melt <- reshape2::melt( overlapped_map )
overlapped_threshold <- filter( overlapped_melt , value < 50 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value > 50 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
# :) Appears successful. Now for the combination.
overlapped_map <- abs(adjusted_map_gfp - adjusted_map_red)
overlapped_melt <- reshape2::melt( overlapped_map )
overlapped_threshold <- filter( overlapped_melt , value > 100 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 80 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 60 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 40 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 20 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 10 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
#### Experimentation: local standardization ####
test_image_gfp <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/538 gfp.tif')
test_image_red <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/538 red.tif')
test_map_gfp <- as.integer( magick::image_data( test_image_gfp , channels="Gray" ) )[,,1]
test_map_red <- as.integer( magick::image_data( test_image_red , channels="Gray" ) )[,,1]
# An example: linear gradient + cube selection
x <- 100
y <- 100
min_max_diff <- range( test_map_gfp[x-50:x+50,y-50:y+50] )
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
( sample(min_max_diff[1]:min_max_diff[2] , 1) - min_max_diff[1] ) * intensity_step
# An integrated example: horrendously inefficient
adjusted_map_gfp <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
for ( x in 51:length(test_map_gfp[1,]-50 ) ) {
for ( y in 51:length(test_map_gfp[,1]-50 ) ) {
min_max_diff <- range( test_map_gfp[x-50:x+50,y-50:y+50] )
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
adjusted_map_gfp[x,y] <- (test_map_gfp[x,y] - min_max_diff[1] ) * intensity_step
}
print(x)
}
#### Experimentation: local standardization ####
test_image_gfp <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/538 gfp.tif')
test_image_red <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/14.6 6h full rescreen/10x/538 red.tif')
test_map_gfp <- as.integer( magick::image_data( test_image_gfp , channels="Gray" ) )[,,1]
test_map_red <- as.integer( magick::image_data( test_image_red , channels="Gray" ) )[,,1]
# An example: linear gradient + cube selection
x <- 100
y <- 100
min_max_diff <- range( test_map_gfp[x-50:x+50,y-50:y+50] )
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
( sample(min_max_diff[1]:min_max_diff[2] , 1) - min_max_diff[1] ) * intensity_step
## Using pre-calculated ranges
# 'Node' matrix
box_size <- 100
x_nodes <- seq( from=1+box_size/2 , to=length(test_map_gfp[1,])-box_size/2 , by=box_size )
y_nodes <- seq( from=1+box_size/2 , to=length(test_map_gfp[,1]-box_size/2 ) , by=box_size )
node_intensity_step <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
node_minimum_intensity <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
min_max_diff <- range( test_map_gfp[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)])
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
node_intensity_step[x,y] <- intensity_step
node_minimum_intensity[x,y] <- min_max_diff[1]
}
print(x)
}
# 'Node' matrix reversion into full-size matrix
intensity_step_map <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
minimum_intensity_map <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
intensity_step_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_intensity_step[x,y]
minimum_intensity_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_minimum_intensity[x,y]
}
}
# Actual image adjustment
adjusted_map_gfp <- matrix( , nrow = length(test_map_gfp[,1]) , ncol = length(test_map_gfp[1,]) )
for ( x in 51:length(test_map_gfp[1,]-50 ) ) {
for ( y in 51:length(test_map_gfp[,1]-50 ) ) {
adjusted_map_gfp[y,x] <- (test_map_gfp[y,x] - minimum_intensity_map[y,x] ) * intensity_step_map[y,x]
}
print(x)
}
# Adjustment confirmation
gfp_melt <- reshape2::melt( adjusted_map_gfp )
gfp_threshold <- filter( gfp_melt , value>150 )
bins_gfp <- bin2(cbind(gfp_threshold$Var1, gfp_threshold$Var2) , nbin=c(100,100))
gfp_bins_melt <- reshape2::melt( bins_gfp$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
## Repetition for red
box_size <- 100
x_nodes <- seq( from=1+box_size/2 , to=length(test_map_red[1,])-box_size/2 , by=box_size )
y_nodes <- seq( from=1+box_size/2 , to=length(test_map_red[,1]-box_size/2 ) , by=box_size )
node_intensity_step <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
node_minimum_intensity <- matrix( , nrow=length(x_nodes) , ncol=length(y_nodes) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
min_max_diff <- range( test_map_red[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)])
intensity_step <- 255 /(min_max_diff[2] - min_max_diff[1])
node_intensity_step[x,y] <- intensity_step
node_minimum_intensity[x,y] <- min_max_diff[1]
}
print(x)
}
intensity_step_map <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
minimum_intensity_map <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
for ( x in 1:length(x_nodes) ) {
for ( y in 1:length(y_nodes) ) {
intensity_step_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_intensity_step[x,y]
minimum_intensity_map[y_nodes[y]-(box_size/2):y_nodes[y]+(box_size/2),
x_nodes[x]-(box_size/2):x_nodes[x]+(box_size/2)] <- node_minimum_intensity[x,y]
}
}
adjusted_map_red <- matrix( , nrow = length(test_map_red[,1]) , ncol = length(test_map_red[1,]) )
for ( x in 51:length(test_map_red[1,]-50 ) ) {
for ( y in 51:length(test_map_red[,1]-50 ) ) {
adjusted_map_red[y,x] <- (test_map_red[y,x] - minimum_intensity_map[y,x] ) * intensity_step_map[y,x]
}
print(x)
}
red_melt <- reshape2::melt( adjusted_map_red )
red_threshold <- filter( red_melt , value>50 )
bins_red <- bin2(cbind(red_threshold$Var1, red_threshold$Var2) , nbin=c(100,100))
red_bins_melt <- reshape2::melt( bins_red$nc )
ggplot( red_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
# :) Appears successful. Now for the combination.
overlapped_map <- abs(adjusted_map_gfp - adjusted_map_red)
overlapped_melt <- reshape2::melt( overlapped_map )
overlapped_threshold <- filter( overlapped_melt , value < 10 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 30 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 50 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
overlapped_threshold <- filter( overlapped_melt , value < 70 )
bins_overlapped <- bin2(cbind(overlapped_threshold$Var1, overlapped_threshold$Var2) , nbin=c(100,100))
overlapped_bins_melt <- reshape2::melt( bins_overlapped$nc )
ggplot( overlapped_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
#### Experimentation: color intensity ####
test_image_PA14_co <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323co.tif')
test_image_PAO1_mono <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323mono.tif')
test_map_co <- as.integer( magick::image_data( test_image_PA14_co , channels="Gray" ) )[,,1]
test_map_mono <- as.integer( magick::image_data( test_image_PAO1_mono , channels="Gray" ) )[,,1]
test_map_co
#### Experimentation: color intensity ####
test_image_PA14_co <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323co.tif')
test_image_PAO1_mono <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323mono.tif')
test_map_co <- as.integer( magick::image_data( test_image_PA14_co , channels="Gray" ) )[,,1]
test_map_mono <- as.integer( magick::image_data( test_image_PAO1_mono , channels="Gray" ) )[,,1]
#Effects of FFT
mono_melt <- reshape2::melt( test_map_mono )
mono_threshold <- filter( mono_melt , value>150 )
bins_mono <- bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
library(ash)
library(reshape2)
#Effects of FFT
mono_melt <- reshape2::melt( test_map_mono )
mono_threshold <- filter( mono_melt , value>150 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
bins_mono <- bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_threshold
#Effects of FFT
mono_melt <- reshape2::melt( test_map_mono )
head(mono_melt)
mono_threshold <- filter( mono_melt , value>150 )
mono_threshold
mono_threshold <- dplyr2::filter( mono_melt , value>150 )
mono_threshold <- dplyr::filter( mono_melt , value>150 )
bins_mono <- bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
head(mono_threshold)
#### Experimentation: color intensity ####
test_image_PA14_co <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323co.tif')
test_image_PA14_mono <- magick::image_read(path = '/Users/64204/Desktop/master/raw-data/28.6 back to basics/16h/imageJ-FFT/FFT gfp 323mono.tif')
test_map_co <- as.integer( magick::image_data( test_image_PA14_co , channels="Gray" ) )[,,1]
test_map_mono <- as.integer( magick::image_data( test_image_PA14_mono , channels="Gray" ) )[,,1]
#Effects of FFT
mono_melt <- reshape2::melt( test_map_mono )
mono_threshold <- dplyr::filter( mono_melt , value>150 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
head(mono_melt)
head(mono_threshold)
mono_threshold <- dplyr::filter( mono_melt , value>50 )
mono_threshold
mono_threshold <- dplyr::filter( mono_melt , value>50 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
ggplot2::ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
library(tidyverse)
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>80 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>80 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>30 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( gfp_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>50 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( mono_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
#Matrix to column format, and binary filter. For coculture.
co_melt <- reshape2::melt( test_map_co )
co_threshold <- dplyr::filter( co_melt , value>50 )
bins_co <- ash::bin2(cbind(co_threshold$Var1, co_threshold$Var2) , nbin=c(100,100))
co_bins_melt <- reshape2::melt( bins_co$nc )
ggplot( co_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>80 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( mono_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>70 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( mono_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
mono_threshold <- dplyr::filter( mono_melt , value>60 )
bins_mono <- ash::bin2(cbind(mono_threshold$Var1, mono_threshold$Var2) , nbin=c(100,100))
mono_bins_melt <- reshape2::melt( bins_mono$nc )
ggplot( mono_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
co_threshold <- dplyr::filter( co_melt , value>60 )
bins_co <- ash::bin2(cbind(co_threshold$Var1, co_threshold$Var2) , nbin=c(100,100))
co_bins_melt <- reshape2::melt( bins_co$nc )
ggplot( co_bins_melt , aes( x = Var2, y = Var1, fill = value )) +
geom_tile() +
theme_bw() +
scale_y_reverse()
